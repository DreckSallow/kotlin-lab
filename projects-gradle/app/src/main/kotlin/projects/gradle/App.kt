/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package projects.gradle

import kotlin.reflect.full.*

fun main() {
    testAnnotations()

    val myFish= listOf(Fish("Flipper"),Fish("Moby Dick"),Fish("Dory"))
    println(myFish)
    testFishExamples()
    runExample()
}

annotation class ImAPlant {}

@ImAPlant
class Plant {
    fun trim() {}
    fun fertilize() {}
}

fun testAnnotations() {
    val classObj = Plant::class
    for (m in classObj.annotations) {
        println("plant method: ${m.annotationClass.simpleName}")
    }
    val annonationObject = classObj.findAnnotation<ImAPlant>()
    println(annonationObject)
}


fun testFishExamples(){
    val fish=Fish("splashy");
    myWith(fish.name){
        println(capitalize())
    }
    println(fish.name);

    var newFish=Fish("splashy").apply{
        name="sharky"
    }
    println(newFish)
    println(fish == newFish)
}

data class Fish(var name:String);


// HighOrder function using inlining
inline fun myWith(name:String,block:String.()->Unit){
    name.block()
}


fun runExample(){
    val runnable= object: Runnable{
        override fun run(){
            println("I'm a runnable")
        }
    }
    val executer=Executer();
    executer.execute(runnable)
    executer.execute{
        println("execute a lambda")
    }
}


class Executer{
    fun execute(block:Runnable){
        block.run()
    }
}